version: '3'

# Note:
# In the official "Kubernetes the Hard Way" guide, SSH configuration comes after provisioning compute resources.
# However, in this Lima-based environment, IP addresses are assigned only after hostnames are set up.
# Therefore, this Taskfile configures hostnames first, and ensures SSH connectivity using those hostnames,
# before provisioning compute resources. This ensures smoother automation in a Lima VM setup.
tasks:
  configure-hostnames:
    desc: Configure hostnames and /etc/hosts file
    cmds:
      - task: _setup-hostname
        vars:
          NAME: '{{.ITEM}}'
        for: [server, node-0, node-1]
      - task: _create-host-lookup-table
      - task: _add-etc-hosts-to-machines

  _setup-hostname:
    internal: true
    desc: Setup the hosts file
    cmds:
      - |
        #!/bin/bash

        limactl shell {{.NAME}} sudo -i bash <<'EOF'
        set -eux -o pipefail

        IP=$(ip -4 addr show lima0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
        FQDN="{{.NAME}}.kubernetes.local"
        HOST="{{.NAME}}"

        echo -e "${IP}\t${FQDN} ${HOST}" | tee -a /etc/hosts
        hostnamectl set-hostname ${HOST}
        systemctl restart systemd-hostnamed
        EOF

  _create-host-lookup-table:
    internal: true
    desc: Create a machines.txt file
    cmds:
      - rm -f hosts.txt
      - echo "# Kubernetes The Hard Way" >> hosts.txt
      - task: _add-hosts
        vars:
          NAME: '{{.ITEM}}'
        for: [server, node-0, node-1]
  _add-hosts:
    internal: true
    desc: Get the IP address, hostname, and FQDN of a machine
    cmds:
      - |
        IP=$(limactl shell {{.NAME}} -- bash -c "ip -4 addr show lima0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}'")
        HOSTNAME=$(limactl shell {{.NAME}} -- bash -c "hostname")
        FQDN=$(limactl shell {{.NAME}} -- bash -c "hostname --fqdn")
        echo -e "$IP\t$FQDN $HOSTNAME" >> hosts.txt

  _add-etc-hosts-to-machines:
    internal: true
    desc: Add hostnames to the machines' /etc/hosts file
    cmds:
      - task: _add-etc-hosts-to-machine
        vars:
          NAME: '{{.ITEM}}'
        for: [jumpbox, server, node-0, node-1]
  _add-etc-hosts-to-machine:
    internal: true
    desc: Add hostnames to the machine's /etc/hosts file
    cmds:
      - limactl cp hosts.txt {{.NAME}}:/tmp/hosts.txt
      - limactl shell {{.NAME}} -- bash -c "sudo sh -c 'cat /tmp/hosts.txt | grep -v {{.NAME}} >> /etc/hosts'"
      - limactl shell {{.NAME}} -- bash -c "rm /tmp/hosts.txt"
  
  create-machines-txt-and-distribute-to-jumpbox:
    desc: Configure the machines
    cmds:
      - |
        #!/bin/bash

        # Read hosts.txt and generate machines.txt
        rm -f machines.txt
        # Skip the first line of hosts.txt and process the rest
        tail -n +2 hosts.txt | while read -r line; do
          if [[ $line == *"node-0"* ]]; then
            echo "$line 10.200.0.0/24" >> machines.txt
          elif [[ $line == *"node-1"* ]]; then
            echo "$line 10.200.1.0/24" >> machines.txt
          else
            echo "$line" >> machines.txt
          fi
        done

        # Display the generated machines.txt
        cat machines.txt
        
        # Copy machines.txt to the jumpbox
        limactl cp machines.txt jumpbox:/tmp/machines.txt
        limactl shell jumpbox sudo -i -- bash -c "cp /tmp/machines.txt ~/"

  configure-ssh-access-from-jumpbox:
    desc: Configure SSH access from the jumpbox to other machines
    cmds:
      - task: _enable-root-ssh-access
        vars:
          NAME: '{{.ITEM}}'
          ROOT_PASS: '{{.ROOT_PASS}}'
        for: [jumpbox, server, node-0, node-1]
      - task: _generate-ssh-keys-on-jumpbox
      - task: _distribute-ssh-keys
        vars:
          NAME: '{{.ITEM}}'
          ROOT_PASS: '{{.ROOT_PASS}}'
        for: [server, node-0, node-1]

  _enable-root-ssh-access:
    internal: true
    desc: Enable root SSH access
    cmds:
      - |
        #!/bin/bash

        limactl shell {{.NAME}} sudo -i bash <<'EOF'
        set -eux -o pipefail

        sed -i 's/^#*PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config
        sed -i 's/^PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config

        echo 'root:{{.ROOT_PASS}}' | chpasswd

        systemctl restart sshd
        EOF
  _generate-ssh-keys-on-jumpbox:
    internal: true
    desc: Generate SSH keys
    cmds:
      - |
        #!/bin/bash

        limactl shell jumpbox sudo -i bash <<'EOF'
        set -eux -o pipefail

        rm -f ~/.ssh/id_rsa ~/.ssh/id_rsa.pub
        ssh-keygen -t rsa -b 4096 -N "" -f ~/.ssh/id_rsa
        EOF
  _distribute-ssh-keys:
    internal: true
    desc: Distribute SSH keys to all machines
    cmds:
      - cmd: |
          #!/bin/bash

          limactl shell jumpbox sudo -i bash <<'EOF'
          set -eux -o pipefail

          sshpass -p '{{.ROOT_PASS}}' ssh-copy-id -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa.pub root@{{.NAME}}
          EOF

  verify-connectivities:
    desc: Verify connectivity between all machines
    cmds:
      - |
        echo "Verifying connectivity between jumpbox and all other machines..."
        limactl shell jumpbox -- bash -c "ping -c 3 \$(getent hosts server | awk '{print \$3}')"
        limactl shell jumpbox -- bash -c "ping -c 3 \$(getent hosts node-0 | awk '{print \$3}')"
        limactl shell jumpbox -- bash -c "ping -c 3 \$(getent hosts node-1 | awk '{print \$3}')"
      - |
        echo "Verifying connectivity between server and all other machines..."
        limactl shell server -- bash -c "ping -c 3 \$(getent hosts node-0 | awk '{print \$3}')"
        limactl shell server -- bash -c "ping -c 3 \$(getent hosts node-1 | awk '{print \$3}')"
      - |
        echo "Verifying connectivity between node-0 and all other machines..."
        limactl shell node-0 -- bash -c "ping -c 3 \$(getent hosts server | awk '{print \$3}')"
        limactl shell node-0 -- bash -c "ping -c 3 \$(getent hosts node-1 | awk '{print \$3}')"
      - |
        echo "Verifying connectivity between node-1 and all other machines..."
        limactl shell node-1 -- bash -c "ping -c 3 \$(getent hosts server | awk '{print \$3}')"
        limactl shell node-1 -- bash -c "ping -c 3 \$(getent hosts node-0 | awk '{print \$3}')"
